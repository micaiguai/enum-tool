{"version":3,"sources":["../src/index.ts"],"sourcesContent":["type Item = {\n  key: string\n  value: unknown\n}\n\ntype MergeInsertions<T> =\n  T extends object\n    ? { [K in keyof T]: MergeInsertions<T[K]> }\n    : T\n\ntype GetItem<L extends readonly Item[], V extends unknown> = L extends readonly [infer F extends Item, ...infer R extends Item[]] \n  ? V extends F['value']\n    ? F\n    : GetItem<R, V>\n  : never\n\ntype EnumInfo<T extends readonly Item[], E = {}> = T extends readonly [infer F extends Item, ...infer R extends Item[]]\n  ? EnumInfo<\n      R,\n      MergeInsertions<E & {\n        [K in F['key']]: F['value']\n      }>\n    >\n  : E\n\nexport function enumify<T extends readonly Item[]>(items: T): EnumInfo<T> & (<V>(value: V) => GetItem<T, V>) {\n  const obj: any = (value: unknown) => {\n    return items.find(item => item.value === value)\n  }\n  items.forEach(item => {\n    obj[item.key] = item.value\n  })\n  return obj\n}\n\n"],"mappings":";AAyBO,SAAS,QAAmC,OAA0D;AAC3G,QAAM,MAAW,CAAC,UAAmB;AACnC,WAAO,MAAM,KAAK,UAAQ,KAAK,UAAU,KAAK;AAAA,EAChD;AACA,QAAM,QAAQ,UAAQ;AACpB,QAAI,KAAK,GAAG,IAAI,KAAK;AAAA,EACvB,CAAC;AACD,SAAO;AACT;","names":[]}